pub const KEYS_OFFSET: usize = 0x100;

#[repr(u8)]
#[derive(Debug, Clone, Copy, PartialEq, Eq, PartialOrd, Ord)]
pub enum KeyboardKey {
    A = 0,
    B,
    C,
    D,
    E,
    F,
    G,
    H,
    I,
    J,
    K,
    L,
    M,
    N,
    O,
    P,
    Q,
    R,
    S,
    T,
    U,
    V,
    W,
    X,
    Y,
    Z,
    Num0,
    Num1,
    Num2,
    Num3,
    Num4,
    Num5,
    Num6,
    Num7,
    Num8,
    Num9,
    NumpadNum0,
    NumpadNum1,
    NumpadNum2,
    NumpadNum3,
    NumpadNum4,
    NumpadNum5,
    NumpadNum6,
    NumpadNum7,
    NumpadNum8,
    NumpadNum9,
    Escape,
    Control,
    Shift,
    Alt,
    LSystem,
    RSystem,
    Menu,
    LBracket,
    RBracket,
    SemiColon,
    Comma,
    Period,
    Apostrophe,
    Slash,
    BackSlash,
    Tilde,
    Equal,
    Space,
    Return,
    NumpadEnter,
    BackSpace,
    Tab,
    PageUp,
    PageDown,
    End,
    Home,
    Insert,
    Delete,
    Minus,
    NumpadAdd,
    NumpadSubtract,
    NumpadDivide,
    NumpadMultiply,
    NumpadDecimal,
    Left,
    Right,
    Up,
    Down,
    F1,
    F2,
    F3,
    F4,
    F5,
    F6,
    F7,
    F8,
    F9,
    F10,
    F11,
    F12,
    F13,
    F14,
    F15,
    Pause,
    World1,
    Unknown = 0xFF,
}

impl KeyboardKey {
    pub(crate) fn offset(&self) -> usize {
        *self as usize + KEYS_OFFSET
    }
}

impl From<u8> for KeyboardKey {
    fn from(value: u8) -> Self {
        if value >= KeyboardKey::A as u8 && value <= KeyboardKey::Unknown as u8 {
            unsafe { core::mem::transmute(value) }
        } else {
            KeyboardKey::Unknown
        }
    }
}
